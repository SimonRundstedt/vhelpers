#!/bin/bash
#
# Small script to test if a domain is using Marge as it's mail server
# and if it is reasonably configured. Eg: cert exists and is valid.
#
# Not a full cert test like https://github.com/drwetter/testssl.sh

INPUT=$1
DOMAIN_SMTP="smtp.$INPUT"
DOMAIN_IMAP="imap.$INPUT"

DOMAIN_MARGE=marge.vertel.se #"$(hostname -f)"
IPMARGE="$(dig +short $DOMAIN_MARGE)"

RUNUNTILFAILURE="" # True if set

## -------------------------------------------------------------------------- ##
## Helper definitions

# Colors for prettier print
U='\033[0;0m'
R='\033[0;31m'
Y='\033[1;33m'
G='\033[0;32m'
B='\033[0;34m'

# Print Messages
function p_error {
    echo -e "${R}Error:${U} $1" # 1>&2
}
function p_warn {
        echo -e "${Y}Warning:${U} $1" # 1>&2
}
function p_info {
        echo -e "${G}Info:${U} $1"
}

function p_test {
        # Print excluding summary.
        echo -en "${G}Test:${U} $1"
}

function p_success {
        # Print excluding summary.
        echo -e "\t${G}[OK]${U}"
}

function p_failure {
        # Print excluding summary.
        echo -e "\t${R}[FAIL]${U}"
}

function exit_if_failure {
        if [ -n "$RUNUNTILFAILURE" ] ; then
            p_warn "Exiting on failure." 1>&2
            exit 1
        fi

}

function test_smtp_domain {
    IPSMTP="$(dig +short $DOMAIN_SMTP | grep -E '^[0-9]{1,3}')"
    if [ "$IPMARGE" != "$IPSMTP" ] ; then
        p_error "Own IP '$IPMARGE' not equal to '$IPSMTP'"
		return 1
    fi
    return 0
}
function test_imap_domain {
    IPIMAP="$(dig +short $DOMAIN_IMAP | grep -E '^[0-9]{1,3}')"
    if [ "$IPMARGE" != "$IPIMAP" ] ; then
        p_error "Own IP '$IPMARGE' not equal to '$IPIMAP'"
		return 1
    fi
    return 0
}

function test_cert_chain {
	# Fails on expired certs.
	_CHAINPEM="$1"
	_CLIENTPEM="$2"
	if openssl verify -CAfile /etc/ssl/certs/ca-certificates.crt\
	 -untrusted $_CHAINPEM $_CLIENTPEM > /dev/null ; then
		p_error "Certificate $_CLIENTPEM could not be verified against chain $_CHAINPEM."
		return 0
	fi
	return 1
}

function test_domain_in_cert_san {
	_CLIENTPEM="$1"
	_DOMAIN="$2"
	# Match DNS under the SAN entry, then match domain.
	_MATCH="$(openssl x509 --text --noout -in $_CLIENTPEM | grep DNS | grep -o $_DOMAIN)"
	if [ -z "$_MATCH" ] ; then
		p_error "Domain $_DOMAIN not in certificate SAN list."
		return 1
	fi
	return 0
}

#function trap_err {
#	p_error "Command at line $1 failed."
#}
#trap 'trap_err $LINENO' ERR

## -------------------------------------------------------------------------- ##

## -------------------------------------------------------------------------- ##
# What to test
# 1. Domains exist and MX marge or SMTP.DOMAIN are MX records.
# -2. Domains point to Marge # Removed, we connect to
# 3. Domains can connect via StartTLS
# 4. Cert is valid: Date and DNS
# 5. Domains can connect via SSL

p_info "Evaluating domain's IP-addresses"

p_test "$DOMAIN_SMTP resolves to $IPMARGE"
if test_smtp_domain 2>&1 > /dev/null ; then
	p_success
else
	p_failure
	exit_if_failure
fi

p_test "$DOMAIN_IMAP resolves to $IPMARGE"
if test_imap_domain 2>&1 > /dev/null ; then
	p_success
else
	p_failure
	exit_if_failure
fi

## -------------------------------------------------------------------------- ##
## Certificate tests:
# Starting with IMAP in case SMTP has another cert for some reason
p_info "IMAP on StartTLS port (143)"

TEMPDIR="$(mktemp -d)"
CHAINPEM=$TEMPDIR/chain.pem
CLIENTPEM=$TEMPDIR/client.pem

openssl s_client -connect $DOMAIN_MARGE:143\
 -servername $DOMAIN_IMAP\
 -starttls imap\
 --showcerts < /dev/null 2>/dev/null > $CHAINPEM
openssl x509 -in $CHAINPEM > $CLIENTPEM

p_test "Test certificate chain starting with $DOMAIN_IMAP"
if test_cert_chain $CHAINPEM $CLIENTPEM 2>&1 > /dev/null ; then
	p_success
else
	p_failure
	exit_if_failure
fi

p_test "SAN contains $DOMAIN_IMAP"
if test_domain_in_cert_san $CLIENTPEM $DOMAIN_IMAP 2>&1 ; then
	p_success
else
	p_failure
	exit_if_failure
fi

rm -rf $TEMPDIR

## -------------------------------------------------------------------------- ##
p_info "IMAP on SSL port (993)"

TEMPDIR="$(mktemp -d)"
CHAINPEM=$TEMPDIR/chain.pem
CLIENTPEM=$TEMPDIR/client.pem

openssl s_client -connect $DOMAIN_MARGE:993\
 -servername $DOMAIN_IMAP\
 --showcerts < /dev/null 2>/dev/null > $CHAINPEM
openssl x509 -in $CHAINPEM > $CLIENTPEM

p_test "Test certificate chain starting with $DOMAIN_IMAP"
if test_cert_chain $CHAINPEM $CLIENTPEM 2>&1 > /dev/null ; then
	p_success
else
	p_failure
	exit_if_failure
fi

p_test "SAN contains $DOMAIN_IMAP"
if test_domain_in_cert_san $CLIENTPEM $DOMAIN_IMAP 2>&1 ; then
	p_success
else
	p_failure
	exit_if_failure
fi

rm -rf $TEMPDIR

## -------------------------------------------------------------------------- ##
# SMTP
p_info "SMTP on StartTLS port (587)"

TEMPDIR="$(mktemp -d)"
CHAINPEM=$TEMPDIR/chain.pem
CLIENTPEM=$TEMPDIR/client.pem

openssl s_client -connect $DOMAIN_MARGE:587\
 -servername $DOMAIN_SMTP\
 -starttls smtp\
 --showcerts < /dev/null 2>/dev/null > $CHAINPEM
openssl x509 -in $CHAINPEM > $CLIENTPEM

p_test "Test certificate chain starting with $DOMAIN_SMTP"
if test_cert_chain $CHAINPEM $CLIENTPEM 2>&1 > /dev/null ; then
	p_success
else
	p_failure
	p_info "If the certificate is expired but IMAP is not the Postfix SNI table\
 might need to be recompiled manually."
	exit_if_failure
fi

p_test "SAN contains $DOMAIN_SMTP"
if test_domain_in_cert_san $CLIENTPEM $DOMAIN_SMTP 2>&1; then
	p_success
else
	p_failure
	exit_if_failure
fi

rm -rf $TEMPDIR

## -------------------------------------------------------------------------- ##
p_info "SMTP on SSL port (465)"

TEMPDIR="$(mktemp -d)"
CHAINPEM=$TEMPDIR/chain.pem
CLIENTPEM=$TEMPDIR/client.pem

openssl s_client -connect $DOMAIN_MARGE:465\
 -servername $DOMAIN_SMTP\
 --showcerts < /dev/null 2>/dev/null > $CHAINPEM
openssl x509 -in $CHAINPEM > $CLIENTPEM

p_test "Test certificate chain starting with $DOMAIN_SMTP"
if test_cert_chain $CHAINPEM $CLIENTPEM 2>&1 > /dev/null ; then
	p_success
else
	p_failure
	p_info "If the certificate is expired but IMAP is not the Postfix SNI table\
 might need to be recompiled manually."
	exit_if_failure
fi

p_test "SAN contains $DOMAIN_SMTP"
if test_domain_in_cert_san $CLIENTPEM $DOMAIN_SMTP 2>&1; then
	p_success
else
	p_failure
	exit_if_failure
fi

rm -rf $TEMPDIR
